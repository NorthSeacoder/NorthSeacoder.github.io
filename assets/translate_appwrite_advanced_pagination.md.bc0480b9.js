import{_ as s,c as a,o as n,a as o}from"./app.7e8aa18b.js";const A=JSON.parse('{"title":"Pagination","description":"","frontmatter":{},"headers":[{"level":2,"title":"Offset Pagination","slug":"offset-pagination"},{"level":2,"title":"Cursor Pagination","slug":"cursor-pagination"},{"level":2,"title":"When to use what?","slug":"when-to-use-what"}],"relativePath":"translate/appwrite/advanced/pagination.md"}'),e={name:"translate/appwrite/advanced/pagination.md"},t=o(`<h1 id="pagination" tabindex="-1">Pagination <a class="header-anchor" href="#pagination" aria-hidden="true">#</a></h1><p>Pagination is the process of dividing data into discrete pages. In Appwrite, it is achieved by using an offset or a cursor, which both come with their own use case and benefits.</p><p>\u5728 Appwrite \u4E2D\uFF0C\u5B83\u662F\u901A\u8FC7\u4F7F\u7528 offset \u6216 cursor \u6765\u5B9E\u73B0\u7684\uFF0C\u5B83\u4EEC\u90FD\u6709\u81EA\u5DF1\u7684\u7528\u6CD5\u548C\u597D\u5904\u3002</p><h2 id="offset-pagination" tabindex="-1">Offset Pagination <a class="header-anchor" href="#offset-pagination" aria-hidden="true">#</a></h2><p>Using limit and offset you can achieve one of the most common approaches to pagination.With limit you can define to how many documents that can be returned from one request, which can be up to a maximum of 100 documents. The offset is simply the number of records you wish to skip before selecting records.</p><p>\u4F7F\u7528 limit \u548C offset\uFF0C\u60A8\u53EF\u4EE5\u5B9E\u73B0\u6700\u5E38\u89C1\u7684\u5206\u9875\u65B9\u6CD5\u4E4B\u4E00\u3002\u901A\u8FC7 limit\uFF0C\u60A8\u53EF\u4EE5\u5B9A\u4E49\u4E00\u4E2A\u8BF7\u6C42\u53EF\u4EE5\u8FD4\u56DE\u591A\u5C11\u4E2A\u6587\u6863\uFF0C\u6700\u591A\u53EF\u4EE5\u662F 100 \u4E2A\u6587\u6863\u3002offset \u662F\u60A8\u5728\u9009\u62E9\u8BB0\u5F55\u4E4B\u524D\u5E0C\u671B\u8DF3\u8FC7\u7684\u8BB0\u5F55\u6570\u3002</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Databases</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">appwrite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> databases </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Databases</span><span style="color:#A6ACCD;">(client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[DATABASE_ID]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;client&#39; comes from setup</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Page 1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> page1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> databases</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listDocuments</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">movies</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Page 2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> page2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> databases</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listDocuments</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">movies</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>The maximum offset is 5000, since the request gets slower as the number of records increases because the database has to read up to the offset number of rows to know where it should start selecting data. Also when there is data added in high frequency - the individual pages might skip results.</p><p>\u6700\u5927 offset \u662F 5000\uFF0C\u968F\u7740\u8BB0\u5F55\u6570\u7684\u589E\u52A0\uFF0C\u8BF7\u6C42\u4F1A\u53D8\u6162\uFF0C\u56E0\u4E3A\u6570\u636E\u5E93\u5FC5\u987B\u8BFB\u53D6\u5230 offset \u7684\u884C\u6570\u624D\u80FD\u77E5\u9053\u5E94\u8BE5\u4ECE\u54EA\u91CC\u5F00\u59CB\u9009\u62E9\u6570\u636E.\u6B64\u5916\uFF0C\u5F53\u9AD8\u9891\u6DFB\u52A0\u6570\u636E\u65F6,\u5404\u4E2A\u9875\u9762\u53EF\u80FD\u4F1A\u8DF3\u8FC7\u7ED3\u679C\u3002</p><h2 id="cursor-pagination" tabindex="-1">Cursor Pagination <a class="header-anchor" href="#cursor-pagination" aria-hidden="true">#</a></h2><p>The cursor is a unique identifier for a specific record, which acts as a pointer to the next record we want to start querying from to get the next page of results. Additionally to the cursor you can pass the cursor position as the cursorDirection before and after allowing you to get paginate back and forth.</p><p>cursor \u662F\u7279\u5B9A\u8BB0\u5F55\u7684\u552F\u4E00\u6807\u8BC6\u7B26\uFF0C\u5B83\u6307\u5411\u5F53\u524D\u6570\u636E\u7684\u6700\u540E\u4E00\u6761\u3002\u9664\u4E86 cursor \u4E4B\u5916\uFF0C\u60A8\u8FD8\u53EF\u4EE5\u4F20\u9012 cursorDirection(before | after) \u6765\u63A7\u5236\u6765\u56DE\u5206\u9875</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Databases</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">appwrite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> databases </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Databases</span><span style="color:#A6ACCD;">(client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[DATABASE_ID]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;client&#39; comes from setup</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Page 1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> page1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> databases</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listDocuments</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">movies</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> lastId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> results</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documents[results</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documents</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Page 2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> page2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> databases</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listDocuments</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">movies</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> lastId)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="when-to-use-what" tabindex="-1">When to use what? <a class="header-anchor" href="#when-to-use-what" aria-hidden="true">#</a></h2><p>The different scenarios in which offset or cursor pagination make the most sense depends on the data itself and how often new records are added. When querying static data, the performance cost alone may not be enough for you to use a cursor, as the added complexity that comes with it may be more than you need.</p><p>\u4F7F\u7528 offset \u6216 cursor \u5206\u9875\u53D6\u51B3\u4E8E\u6570\u636E\u672C\u8EAB\u4EE5\u53CA\u6DFB\u52A0\u65B0\u8BB0\u5F55\u7684\u9891\u7387\u3002\u5728\u67E5\u8BE2\u9759\u6001\u6570\u636E\u65F6\uFF0C\u4EC5\u51ED\u6027\u80FD\u6210\u672C\u53EF\u80FD\u4E0D\u8DB3\u4EE5\u8BA9\u60A8\u4F7F\u7528 cursor\uFF0C\u56E0\u4E3A\u968F\u4E4B\u800C\u6765\u7684\u9644\u52A0\u590D\u6742\u6027\u53EF\u80FD\u8D85\u51FA\u60A8\u7684\u9700\u8981\u3002</p><p>Offset pagination should be used for static data with an indicator to what is the current page and how many pages are available in total. For example a list with up to 20 pages or static data like a list of countries or currencies.</p><p>offset \u5206\u9875\u5E94\u7528\u4E8E\u9759\u6001\u6570\u636E\uFF0C\u5E76\u6307\u660E\u5F53\u524D\u9875\u9762\u4EE5\u53CA\u603B\u9875\u6570.\u4F8B\u5982\uFF0C\u6700\u591A 20 \u9875\u7684\u5217\u8868\u6216\u9759\u6001\u6570\u636E\uFF08\u5982\u56FD\u5BB6\u6216\u8D27\u5E01\u5217\u8868\uFF09\u3002</p><p>Cursor pagination should be used high-frequency data which is lazy-loaded with infinite scrolling. For example a feed, comment section, chat history or high volume datasets.</p><p>cursor \u5206\u9875\u5E94\u8BE5\u4F7F\u7528\u65E0\u9650\u6EDA\u52A8\u7684\u61D2\u52A0\u8F7D\u7684\u9AD8\u9891\u6570\u636E\u3002\u4F8B\u5982\u63D0\u8981\u3001\u8BC4\u8BBA\u90E8\u5206\u3001\u804A\u5929\u8BB0\u5F55\u6216\u5927\u91CF\u6570\u636E\u96C6\u3002</p>`,20),p=[t];function l(r,c,i,D,y,F){return n(),a("div",null,p)}var d=s(e,[["render",l]]);export{A as __pageData,d as default};
